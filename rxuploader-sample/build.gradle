apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

dependencies {
    compile project(':rxuploader')

    compile rootProject.deps.androidDesign
    compile rootProject.deps.androidSupportLibrary
    compile rootProject.deps.androidAnnotations

    compile rootProject.deps.okHttp
    compile rootProject.deps.okHttpLogging

    compile rootProject.deps.retrofit
    compile rootProject.deps.retrofitGsonConverter
    compile rootProject.deps.retrofitRxJavaAdapter

    compile rootProject.deps.rxJava
    compile rootProject.deps.rxAndroid

    compile rootProject.deps.glide

    compile rootProject.deps.gson
    provided rootProject.deps.autovalue
    provided rootProject.deps.autovalueGson

    compile rootProject.deps.timber

    // oauth1
    compile 'se.akerfeldt:okhttp-signpost:1.1.0'
    compile 'oauth.signpost:signpost-core:1.2.1.2'
}

android {
    compileSdkVersion rootProject.COMPILE_SDK_VERSION
    buildToolsVersion rootProject.ANDROID_BUILD_TOOLS_VERSION

    defaultConfig {
        minSdkVersion rootProject.MIN_SDK_VERSION
        targetSdkVersion rootProject.TARGET_SDK_VERSION
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
    }

    lintOptions {
        lintConfig file('lint.xml')
    }

    compileOptions {
        sourceCompatibility rootProject.JAVA_SOURCE_VERSION
        targetCompatibility rootProject.JAVA_TARGET_VERSION
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
    }

    signingConfigs {
        release
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
    }
}

def Properties props = new Properties()
def propFile = new File('signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null &&
            props.containsKey('STORE_FILE') &&
            props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') &&
            props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}
